<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Series on wst_dreg&#39;s blog</title>
    <link>https://wst-casd.github.io/wst.github.io/series/</link>
    <description>Recent content in Series on wst_dreg&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>wst - 非商业性使用</copyright>
    
        <atom:link href="https://wst-casd.github.io/wst.github.io/series/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数据结构基础之桶排序</title>
      <link>https://wst-casd.github.io/wst.github.io/2021/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%A1%B6%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Wed, 17 Nov 2021 07:53:40 +0800</pubDate>
      
      <guid>https://wst-casd.github.io/wst.github.io/2021/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%A1%B6%E6%8E%92%E5%BA%8F/</guid>
      <description>1 定义 桶排序（Bucket Sort）是一种线性时间的排序算法，其主要思想是：将待排序集合中处于同一个值域范围内的元素存入同一个桶中，也就是根</description>
    </item>
    
    <item>
      <title>数据结构基础之计数排序</title>
      <link>https://wst-casd.github.io/wst.github.io/2021/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Wed, 10 Nov 2021 07:53:40 +0800</pubDate>
      
      <guid>https://wst-casd.github.io/wst.github.io/2021/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/</guid>
      <description>1 定义 计数排序（Counting Sort）是一个非基于比较的排序算法。它的优势在于在对一定范围内的整数进行排序时，它的时间复杂度为O($n+</description>
    </item>
    
    <item>
      <title>数据结构基础之堆排序</title>
      <link>https://wst-casd.github.io/wst.github.io/2021/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A0%86%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sat, 06 Nov 2021 07:53:40 +0800</pubDate>
      
      <guid>https://wst-casd.github.io/wst.github.io/2021/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A0%86%E6%8E%92%E5%BA%8F/</guid>
      <description>1 定义 堆排序是一种高效的选择排序算法。 基于堆 的概念， 该算法高效的主要原因是在堆里积累了前面所做的比较。基于堆的结构特征，这种信息可以很自然的</description>
    </item>
    
    <item>
      <title>数据结构基础之归并排序</title>
      <link>https://wst-casd.github.io/wst.github.io/2021/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Tue, 02 Nov 2021 07:53:40 +0800</pubDate>
      
      <guid>https://wst-casd.github.io/wst.github.io/2021/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</guid>
      <description>1 定义 归并是一种典型的序列操作，其工作是把两个或者更多有序的序列合并成一个有序序列。基于归并的思想也可以实现排序，成为归并排序。基本方法如下</description>
    </item>
    
    <item>
      <title>数据结构基础之快速排序</title>
      <link>https://wst-casd.github.io/wst.github.io/2021/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 25 Oct 2021 07:53:40 +0800</pubDate>
      
      <guid>https://wst-casd.github.io/wst.github.io/2021/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</guid>
      <description>1 定义 快速排序实现中也采用了发现逆序和交换记录位置的方法，但算法中最基本的思想还是划分，即按某种标准把待排序的序列划分为“小记录”和“大记录</description>
    </item>
    
    <item>
      <title>数据结构基础之冒泡排序</title>
      <link>https://wst-casd.github.io/wst.github.io/2021/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Fri, 15 Oct 2021 07:53:40 +0800</pubDate>
      
      <guid>https://wst-casd.github.io/wst.github.io/2021/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</guid>
      <description>1 定义 交换排序基于另一种完全不同的看法：一个序列中的记录没有排序好，那么其中一定有逆序存在。如果交换所发现的逆序记录对，得到的序列更加接近排</description>
    </item>
    
    <item>
      <title>数据结构基础之选择排序</title>
      <link>https://wst-casd.github.io/wst.github.io/2021/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 10 Oct 2021 07:53:40 +0800</pubDate>
      
      <guid>https://wst-casd.github.io/wst.github.io/2021/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</guid>
      <description>1 概念 在插入排序中，每次操作处理哪个记录并不重要，关键在于把被处理记录插入到已排序序列中，因此，可以采取最方便的方式取记录，即按顺序提取。选</description>
    </item>
    
    <item>
      <title>数据结构基础之插入排序</title>
      <link>https://wst-casd.github.io/wst.github.io/2021/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Tue, 05 Oct 2021 07:53:40 +0800</pubDate>
      
      <guid>https://wst-casd.github.io/wst.github.io/2021/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</guid>
      <description>1 概念 插入排序，一般也被称作简单插入排序，它的基本思想是将一个记录插入到已经排好序的有序序列中，从而得到一个新的、记录数增加1的有序序列。 如</description>
    </item>
    
    <item>
      <title>数据结构基础之排序</title>
      <link>https://wst-casd.github.io/wst.github.io/2021/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Thu, 30 Sep 2021 07:53:40 +0800</pubDate>
      
      <guid>https://wst-casd.github.io/wst.github.io/2021/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8E%92%E5%BA%8F/</guid>
      <description>1 定义 排序(Sorting)就是整理数据的序列，使其中元素按照特定顺序排列的操作。在排序的过程中，序列中的数据元素保持不变，但其排序顺序可能</description>
    </item>
    
    <item>
      <title>数据结构基础之平衡二叉树</title>
      <link>https://wst-casd.github.io/wst.github.io/2021/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Wed, 07 Jul 2021 07:53:40 +0800</pubDate>
      
      <guid>https://wst-casd.github.io/wst.github.io/2021/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>平衡二叉排序树的基本考虑是：如果树中的每个结点的左右子树的高度差不多(&amp;ldquo;平衡&amp;rdquo;)，整个树的结构也会比较好，不会出现特</description>
    </item>
    
    <item>
      <title>数据结构基础之二叉排序树</title>
      <link>https://wst-casd.github.io/wst.github.io/2021/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/</link>
      <pubDate>Mon, 05 Jul 2021 07:53:40 +0800</pubDate>
      
      <guid>https://wst-casd.github.io/wst.github.io/2021/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/</guid>
      <description>1 二叉排序树 1.1 定义 二叉排序树(Binary Sort Tree)，又称二叉查找树(Binary Search Tree)，是一种在结点里存储数据的二叉树。它或者是一</description>
    </item>
    
    <item>
      <title>数据结构基础之优先队列</title>
      <link>https://wst-casd.github.io/wst.github.io/2021/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</link>
      <pubDate>Wed, 23 Jun 2021 08:53:40 +0800</pubDate>
      
      <guid>https://wst-casd.github.io/wst.github.io/2021/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</guid>
      <description>1 概念 队列 的特点是先入先出，下图是队列的一个例子： 优先队列 的特点是存入其中的每项数据都另外附一个数值，表示这个项的优先程度，称为其优先级。优</description>
    </item>
    
    <item>
      <title>数据结构基础之堆</title>
      <link>https://wst-casd.github.io/wst.github.io/2021/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A0%86/</link>
      <pubDate>Sun, 20 Jun 2021 07:53:40 +0800</pubDate>
      
      <guid>https://wst-casd.github.io/wst.github.io/2021/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A0%86/</guid>
      <description>1 堆及其性质 堆 本质上是结点里存储数据的完全二叉树，但是堆中数据的存储要满足一种特殊的堆序：任一个结点所存储的数据先于或等于其子结点(如果存在</description>
    </item>
    
    <item>
      <title>数据结构基础之树</title>
      <link>https://wst-casd.github.io/wst.github.io/2021/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%A0%91/</link>
      <pubDate>Sun, 13 Jun 2021 06:53:40 +0800</pubDate>
      
      <guid>https://wst-casd.github.io/wst.github.io/2021/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%A0%91/</guid>
      <description>1 树 树(tree)是一种数据结构，是由有限个($n$个($n&amp;gt;0$))结点组成的具有层次关系的集合，它具有以下的特点： 一个结构如果不空</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://wst-casd.github.io/wst.github.io/about/</link>
      <pubDate>Thu, 20 May 2021 00:18:39 +0800</pubDate>
      
      <guid>https://wst-casd.github.io/wst.github.io/about/</guid>
      <description>coming</description>
    </item>
    
    <item>
      <title>数据结构基础之队列</title>
      <link>https://wst-casd.github.io/wst.github.io/2021/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%98%9F%E5%88%97/</link>
      <pubDate>Sat, 15 May 2021 07:40:40 +0800</pubDate>
      
      <guid>https://wst-casd.github.io/wst.github.io/2021/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%98%9F%E5%88%97/</guid>
      <description>1 概述 队列 ( Queue )是一种先进先出( first in first out )的线性数据结构，插入操作在队尾( rear )进行, 删除操作的队头( front )进行。 2 队列的抽象数据类型 ADT Queue: Queue(self) #创</description>
    </item>
    
    <item>
      <title>数据结构基础之堆栈</title>
      <link>https://wst-casd.github.io/wst.github.io/2021/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A0%86%E6%A0%88/</link>
      <pubDate>Thu, 13 May 2021 00:53:40 +0800</pubDate>
      
      <guid>https://wst-casd.github.io/wst.github.io/2021/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A0%86%E6%A0%88/</guid>
      <description>1 概述 栈 ( Stack )，又称堆栈，是一种后进先出( last in first out )的线性数据结构，对栈的操作只允许在栈的一端(栈顶)进行。 1](#baiduxueshu) -- -- 2 栈的抽象数据类型 ADT Stack: Stack(self) #</description>
    </item>
    
  </channel>
</rss>
